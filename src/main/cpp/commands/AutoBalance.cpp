// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

#include "commands/AutoBalance.h"
#include "commands/WaveWaitCommand.h"
#include "Globals.h"

AutoBalance::AutoBalance(SwerveDrive* swerveDrive)
                      : m_swerveDrive(swerveDrive)
{

    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("AutoBalance");
    // m_timeout = timeout;
}

// Called just before this Command runs the first time
void AutoBalance::Initialize() {
    // WaitCommand::Initialize();
    m_balanceState = Before_Balance;
    m_isBalanced = false;
    m_swerveDrive->InitialSwerve();
}

// Called repeatedly when this Command is scheduled to run
void AutoBalance::Execute() {
    // m_swerveDrive->DrivePods(m_inputLX, m_inputLY, m_inputRX);

    switch(m_balanceState) {
        case Before_Balance:
            // CASE: before charging station ramp
            // drive straight            
            if (m_swerveDrive->GetRobotPitch() < -2.0) {
                m_balanceState = Tilted_Up;
            }
            m_swerveDrive->DrivePods(0.3, 0, 0);
            break;
        case Tilted_Up:
            // CASE: tilted driving up station
            // pitch is negative - keep driving straight            
            if (fabs(m_swerveDrive->GetRobotPitch()) <= 2.0) {
                m_balanceState = Level_Balance;
            } else if (m_swerveDrive->GetRobotPitch() > 2.0 ) {
                m_balanceState = Tilted_Down;
            }
            m_swerveDrive->DrivePods(0.2, 0, 0);
            break;
        case Tilted_Down:
            // CASE: tilted driving down station
            // pitch is positive - reverse, reverse!!
            if (fabs(m_swerveDrive->GetRobotPitch()) <= 2.0) {
                m_balanceState = Level_Balance;
            } else if (m_swerveDrive->GetRobotPitch() < -2.0) {
                m_balanceState = Tilted_Up;
            }
            m_swerveDrive->DrivePods(-0.2, 0, 0);
            break;
        case Level_Balance:
            // CASE: balanced on station
            // stay put + end auto
            m_swerveDrive->DrivePods(0, 0, 0);
            if (m_swerveDrive->GetRobotPitch() < -2.0) {
                m_balanceState = Tilted_Up;
            } else if (m_swerveDrive->GetRobotPitch() > 2.0) {
                m_balanceState = Tilted_Down;
            } else {
                m_swerveDrive->LockSwerve();
                m_isBalanced = true;
            }            
            break;
    }
}

// Make this return true when this Command no longer needs to run execute()
bool AutoBalance::IsFinished() {
    // m_swerveDrive->DrivePods(0, 0, 0);
    // return false;
    if (m_isBalanced) {
        return true;
    }
    return false;
}

// Called once after isFinished returns true
void AutoBalance::End(bool interrupted) {
    // WaitCommand::End(interrupted);
    m_swerveDrive->DrivePods(0, 0, 0);
}

bool AutoBalance::RunsWhenDisabled() const {
    return false;

}
