// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

#include "commands/ScoreBackoff.h"
#include "commands/WaveWaitCommand.h"
#include <iostream>

ScoreBackoff::ScoreBackoff(Elevator* elevator, units::second_t timeout)
                      : WaitCommand(timeout), m_elevator(elevator), m_timeout(timeout)
{

    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("ScoreBackoff");
    m_timeout = timeout;
}

// Called just before this Command runs the first time
void ScoreBackoff::Initialize() {
    // WaitCommand::Initialize();
    m_targetReached = false;
    m_elevator->setTopConeTarget();
}

// Called repeatedly when this Command is scheduled to run
void ScoreBackoff::Execute() {
    // do the thing
    if(!m_elevator->isTargetSet())
    {
        m_elevator->setBackoffTarget();
    }

    // Use this if we want to use PID (comment out if use manual operation)
    m_targetReached = m_elevator->moveToCurrentTarget();

}

// Make this return true when this Command no longer needs to run execute()
bool ScoreBackoff::IsFinished() {
    std::cout << "FINISHED - Backoff" << std::endl;
    if(m_targetReached)
    {
        // Top Target reached
        std::cout << "Backoff" << std::endl;
        return true;
    }
    else
    {
        return false;
    }
}

// Called once after isFinished returns true
void ScoreBackoff::End(bool interrupted) {
    // WaitCommand::End(interrupted);
    std::cout << "END - Backoff" << std::endl;
    m_targetReached = false;    
}

bool ScoreBackoff::RunsWhenDisabled() const {
    return false;
}
