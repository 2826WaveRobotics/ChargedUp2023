// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
#pragma once

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include <frc2/command/SubsystemBase.h>
#include <frc/DigitalInput.h>
#include <frc/DigitalOutput.h>
#include <frc/motorcontrol/PWMSparkMax.h>
#include <frc/XboxController.h>
// #include <rev/SparkMaxRelativeEncoder.h>
// #include <rev/CANSparkMax.h>
// #include<rev/CANSparkMaxLowLevel.h>
#include "frc2/command/PIDSubsystem.h"


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author Wave Robotics 2826
 */

// Elevator functions used to deploy the elevator in auto mode
typedef enum {
    Elevator_Off,
    // Deploy elevator to top level
    Elevator_DeployTargetTop,
    // Deploy elevator to middle level
    Elevator_DeployTargetMiddle,
    // Return elevator to home
    Elevator_Stow
} ElevatorFunction;

// Elevator class shall be used to extend and retract the elevator. 
// This class will also preform the functions of the Endofactor.
class Elevator: public frc2::SubsystemBase {
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Limit switch to detect the elevator home position
    //frc::DigitalInput m_elevatorAtHomeLimitSwitch{5};

    // Endofactor grabber solenoid to grab and release the cone
    // frc::DigitalOutput m_endoFactorGrabberRightOut{6};
    // frc::DigitalOutput m_endoFactorGrabberLeftOut{7};

    // Endofactor solenoid to move up and down
    //frc::DigitalOutput m_endoFactorOut{8};

    // Current position of the elevator
    double m_elevatorPosition;

    // // The motor controller for the Endofactor intake motor
    // rev::CANSparkMax *m_endofactorMotor;

    // // Motor controller for the elevator
    // rev::CANSparkMax *m_elevatorMotorB;
    // rev::CANSparkMax *m_elevatorMotorA;

    //rev::CANSparkMax *m_elevatorMotorA;
    //rev::SparkMaxRelativeEncoder *m_elevatorEncoderA;

    // // Internal incoders for the elevator motors
    // rev::SparkMaxRelativeEncoder *m_elevatorEncoderA;
    // rev::SparkMaxRelativeEncoder *m_elevatorEncoderB;

    // // PID controller for the elevator auto deploy operations
    frc2::PIDController *m_elevatorPID; 

    // Pointer to the operator controller
    frc::XboxController *m_operatorJoystick;
    ElevatorFunction m_elevatorFunction;
    
    // Pre-set elevator position for the top target
    double m_elevatorTargetTop;

    // Pre-set elevator position for the middle target
    double m_elevatorTargetMiddle;

    // Flag is true while elevator is stowing
    bool m_stowing;

    // Command speed to the elevator motors if speed is within range.
    // Returns true if speed is between -k_maxElevatorSpeed and k_maxElevatorSpeed
    bool setElevator(double speed);

    // Command speed to the endofactor motor if speed is within range.
    // Returns true if speed is between -k_maxEndoFactorSpeed and k_maxEndoFactorSpeed
    bool setEndoFactor(double speed);

    // Constants used for Elevator functions
    static constexpr const double k_maxElevatorSpeed = 0.8;
    static constexpr const double k_maxEndoFactorSpeed = 0.5;
    static constexpr const double k_P = 0.1;
    static constexpr const double k_I = 0.0;
    static constexpr const double k_D = 0.0;
    static constexpr const double k_delta = 1.0;


public:
    Elevator();

    void Periodic() override;
    void SimulationPeriodic() override;

    // Periodic operation for the elevator
    void runElevator();

    // Get current position of the elevator
    // Returns 0 if k_maxDelta < (Pos A ~ Pos B), otherwise return Pos A
    double getElevatorPosition();

    // Returns true when elevator is at home position
    bool isElevatorAtHome();
};

