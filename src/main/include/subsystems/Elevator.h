// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
#pragma once

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include <frc2/command/SubsystemBase.h>
#include <frc/DigitalInput.h>
#include <frc/DigitalOutput.h>
#include <frc/motorcontrol/PWMSparkMax.h>
#include <frc/XboxController.h>
#include <rev/SparkMaxRelativeEncoder.h>
#include <rev/CANSparkMax.h>
#include<rev/CANSparkMaxLowLevel.h>
#include "frc2/command/PIDSubsystem.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author Wave Robotics 2826
 */

typedef enum {
    Elevator_Off,
    Elevator_DeployTargetA,
    Elevator_DeployTargetB,
    Elevator_Stow
} ElevatorFunction;


class Elevator: public frc2::SubsystemBase {
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    frc::DigitalOutput m_endoFactorDeployOut{2};
    frc::DigitalOutput m_endoFactorIntakeOut{1};
    frc::DigitalInput m_elevatorAtHomeLimitSwitch{0};
    double m_elevatorPosition;

    rev::CANSparkMax *m_endofactorMotor; //{2, CANSparkMaxLowLevel::MotorType::kBrushless};
    rev::CANSparkMax *m_elevatorMotorB; //{1, CANSparkMaxLowLevel::MotorType::kBrushless};
    rev::CANSparkMax *m_elevatorMotorA; //{0, CANSparkMaxLowLevel::MotorType::kBrushless};
    rev::SparkMaxRelativeEncoder *m_elevatorEncoderA;
    rev::SparkMaxRelativeEncoder *m_elevatorEncoderB;
    frc2::PIDController *m_elevatorPID; //{1.0, 0.0, 0.0};

    frc::XboxController *m_operatorJoystick;
    ElevatorFunction m_elevatorFunction;
    double m_elevatorTargetA;
    double m_elevatorTargetB;
    bool m_stowing;

    bool setElevator(double speed);
    bool setEndoFactor(double speed);

    static constexpr const double k_maxElevatorSpeed = 0.8;
    static constexpr const double k_maxEndoFactorSpeed = 0.5;
    static constexpr const double k_P = 0.1;
    static constexpr const double k_I = 0.0;
    static constexpr const double k_D = 0.0;
    static constexpr const double k_delta = 1.0;


public:
    Elevator();

    void Periodic() override;
    void SimulationPeriodic() override;

    double getElevatorPosition();
    bool isElevatorAtHome();


};

