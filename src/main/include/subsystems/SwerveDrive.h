// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.
#pragma once

#include <frc2/command/SubsystemBase.h>
#include "ctre/Phoenix.h"
#include <frc/Encoder.h>
#include <rev/CANSparkMax.h>
#include "subsystems/SwervePod.h"
#include <frc/kinematics/SwerveDriveKinematics.h>
#include <units/velocity.h>
#include <ctre/phoenix/sensors/Pigeon2.h>
#include <frc/XboxController.h>

#define k_DB (double)0.07

/**
 * SwerveDrive header file
 *
 * @author 2826WaveRobotics
 */
class SwerveDrive: public frc2::SubsystemBase {
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities
    private:        

        ctre::phoenix::sensors::Pigeon2 *m_pigeon;
        double m_gyroHeadings[3] = {0, 0, 0};

        rev::CANSparkMax *m_rightBottomMotor;
        rev::CANSparkMax *m_rightTopMotor;
        rev::CANSparkMax *m_leftBottomMotor;
        rev::CANSparkMax *m_leftTopMotor;
        rev::CANSparkMax *m_pointBottomMotor;
        rev::CANSparkMax *m_pointTopMotor;

        frc::SwerveDriveKinematics<3> *m_kinematics;

        SwervePod *m_rightPod;
        SwervePod *m_leftPod;
        SwervePod *m_pointPod;

        const double k_gearRatioWheelSpeed = 3.2196;
        const double k_wheelDiameterMeters = 0.0635;
        const double k_wheelCircumferenceMeters = k_wheelDiameterMeters * (double)3.141592653;
        const double k_maxMotorSpeed = 5200.0;

        // motor currents;
        double m_leftPodTopMotorCurrent = 0.0;
        double m_leftPodBottomMotorCurrent = 0.0;
        double m_rightPodTopMotorCurrent = 0.0;
        double m_rightPodBottomMotorCurrent = 0.0;
        double m_pointPodTopMotorCurrent = 0.0;
        double m_pointPodBottomMotorCurrent = 0.0;

        double m_leftPodOffsetAngle = 96.0;
        double m_rightPodOffsetAngle = 133.0;
        double m_pointPodOffsetAngle = 172.0;
        double leftOffset;
        double rightOffset;
        double pointOffset;

        double m_lockedLeftAngle = 135.0; // 45 
        double m_lockedRightAngle = 225.0; // 315
        double m_lockedPointAngle = 90.0; // 0

        bool m_allAligned = false;

    public:

        SwerveDrive();
    
        // length of the intake side
        const double robotWidth = 0.717;
        // length of the point to the midpoint of the intake side
        const double robotHeight = 0.617;

        void Periodic() override;
        void SimulationPeriodic() override;

        double GetMotorTemperature(int pod, int motor);

        void DiagonosticSwerveRotate(std::string podInput, std::string motorInput, double speedIncrement);

        /**
         * Function that updates a pod offset angle based on input from the smartdashboard
        */
        void UpdatePodOffsetAngles();

        /**
         * Function that takes inputs from the joysticks and transforms
         * the inputs into states (speed, angle) that individual swerve modules will utilize
         * 
         * @param move joystick input from left y-axis (LY)
         * @param strafe joystick input from left x-axis (LX)
         * @param rotation joystick input from right x-axis (RX)
        */
        void DrivePods(double move, double strafe, double rotation);

        /**
         * Function that orients the swerve drive into opposing angles for a "locked" position
        */
        void LockSwerve();

        /**
         * Function that orients the swerve drive into aligned angles for a "straight" position
        */
        bool InitialSwerve();

        double GetLeftPodOffsetAngle();
        double GetRightPodOffsetAngle();
        double GetPointPodOffsetAngle();

        /**
         * Function that gets the current of a given pod and motor in amps
         * 
         * @param pod which pod you want to query
         * rght: 0
         * left: 1
         * point: 2
         * @param motor which motor you want to get the current from
         * bottom: 0
         * top: 1
        */
        double GetPodCurrent(int pod, bool motor);

        // pigeon gyro getters
        double GetRobotPitch();
        double GetRobotRoll();
        double GetRobotYaw();

        void SetLeftPodOffsetAngle(double offsetAngle);
        void SetRightPodOffsetAngle(double offsetAngle);
        void SetPointPodOffsetAngle(double offsetAngle);  

        void Initialize();
        
};

