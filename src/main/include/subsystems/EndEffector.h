// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

#pragma once

#include <frc2/command/SubsystemBase.h>
#include <frc/DigitalInput.h>
#include<frc/DigitalOutput.h>
#include <frc/motorcontrol/PWMSparkMax.h>
#include <frc/XboxController.h>
#include <rev/CANSparkMax.h>
#include<rev/CANSparkMaxLowLevel.h>

#include "Globals.h"

/**
 * EndEffector class shall be used to extend and retract the elevator. 
 * This class will also preform the functions of the EndEffector.
 * 
 * @author 2826WaveRobotics
*/
class EndEffector: public frc2::SubsystemBase {
private:
    // It's desirable that everything possible is private except
    // for methods that implement subsystem capabilities

    // IR sensor to detect if a cone is in the grabber
    // frc::DigitalInput m_detectConeLimitSwitch{k_detectConeLimitSwitch};

    // The motor controller for the EndEffector intake motor
    rev::CANSparkMax *m_endEffectorMotor;

    // Pointer to the operator controller
    frc::XboxController *m_operatorJoystick;

    // Scoring object flag. True when scoring with Cone
    bool m_isCone;

    // LED
    // frc::DigitalOutput *m_coneLED;
    // frc::DigitalOutput *m_cubeLED;
    // frc::DigitalOutput::DigitalOutput m_coneLED{5}
    // frc::DigitalOutput::DigitalOutput m_cubeLED{6}
    // frc::DigitalOutput m_coneLED{7};
    // frc::DigitalOutput m_coneLED{8};
    // frc::DigitalOutput m_coneLED{9};
    
    // Command speed to the endEffector motor if speed is within range.
    void setEndEffectorRoller(double speed);

   static constexpr const double k_endEffectorSpeedFactor = 0.5;
   
public:
    EndEffector();

    void Periodic() override;
    void SimulationPeriodic() override;

    // Initialize EndEffector object
    void Initialize();

    // EndEffector EndEffector operations.
    void runEndEffector();
    
};